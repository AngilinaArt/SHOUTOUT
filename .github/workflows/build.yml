name: Build Desktop Apps

on:
  push:
    tags: ["v*"]
  workflow_dispatch: # Manueller Trigger

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm install
          cd client
          npm install

      - name: Create production .env file
        run: |
          cd client
          echo "WS_URL=${{ secrets.PROD_WS_URL }}" > .env
          echo "WS_TOKEN=${{ secrets.PROD_WS_TOKEN }}" >> .env
          echo "SERVER_URL=${{ secrets.PROD_SERVER_URL }}" >> .env
          echo "NODE_ENV=production" >> .env

      - name: Build Windows app
        run: |
          cd client
          npm run build:win

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: client/dist/*.exe

  build-macos:
    runs-on: macos-14 # Spezifische macOS Version
    strategy:
      matrix:
        arch: [x64, arm64] # Beide Architekturen
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm install
          cd client
          npm install

      - name: Create production .env file
        run: |
          cd client
          echo "WS_URL=${{ secrets.PROD_WS_URL }}" > .env
          echo "WS_TOKEN=${{ secrets.PROD_WS_TOKEN }}" >> .env
          echo "SERVER_URL=${{ secrets.PROD_SERVER_URL }}" >> .env
          echo "NODE_ENV=production" >> .env

      - name: Build macOS app
        run: |
          cd client
          npm run build:mac:${{ matrix.arch }}
        env:
          ELECTRON_ARCH: ${{ matrix.arch }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer-${{ matrix.arch }}
          path: client/dist/*.dmg

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: ./artifacts/windows/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-installer-x64
          path: ./artifacts/macos/x64/

      - name: Download macOS ARM64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-installer-arm64
          path: ./artifacts/macos/arm64/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/windows/*.exe
            ./artifacts/macos/x64/*.dmg
            ./artifacts/macos/arm64/*.dmg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_SECRET_GIT }}
